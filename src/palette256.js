export const palette32RGBA = [
    0x000000FF, 0x101010FF, 0x202020FF, 0x313031FF, 0x414441FF, 0x525552FF, 0x626562FF, 0x737573FF,
    0x8B898BFF, 0x9C999CFF, 0xACAAACFF, 0xBDBABDFF, 0xCDCECDFF, 0xDEDEDEFF, 0xEEEEEEFF, 0xFFFFFFFF,
    0x100C08FF, 0x201C10FF, 0x312818FF, 0x413820FF, 0x524429FF, 0x625531FF, 0x736139FF, 0x837141FF,
    0x947D4AFF, 0xA48D52FF, 0xB4995AFF, 0xC5AA62FF, 0xD5B66AFF, 0xE6C673FF, 0xF6D27BFF, 0xFFDE83FF,
    0x081008FF, 0x182010FF, 0x203018FF, 0x314020FF, 0x395029FF, 0x4A6131FF, 0x527139FF, 0x628141FF,
    0x6A914AFF, 0x7BA152FF, 0x83B25AFF, 0x94C262FF, 0x9CD26AFF, 0xACE273FF, 0xB4F27BFF, 0xC5FF83FF,
    0x081008FF, 0x102010FF, 0x183018FF, 0x204029FF, 0x295031FF, 0x316139FF, 0x397141FF, 0x418152FF,
    0x4A915AFF, 0x52A162FF, 0x5AB26AFF, 0x62C27BFF, 0x6AD283FF, 0x73E28BFF, 0x7BF294FF, 0x83FFA4FF,
    0x081010FF, 0x102020FF, 0x183031FF, 0x204041FF, 0x295052FF, 0x316162FF, 0x397173FF, 0x418183FF,
    0x4A9194FF, 0x52A1A4FF, 0x5AB2B4FF, 0x62C2C5FF, 0x6AD2D5FF, 0x73E2E6FF, 0x7BF2F6FF, 0x83FFFFFF,
    0x080810FF, 0x101420FF, 0x181C31FF, 0x202841FF, 0x293052FF, 0x313C62FF, 0x394473FF, 0x415083FF,
    0x4A5994FF, 0x5265A4FF, 0x5A6DB4FF, 0x6279C5FF, 0x6A81D5FF, 0x738DE6FF, 0x7B95F6FF, 0x83A1FFFF,
    0x080810FF, 0x181020FF, 0x201831FF, 0x312041FF, 0x392852FF, 0x4A3062FF, 0x523873FF, 0x624083FF,
    0x734894FF, 0x7B50A4FF, 0x8B59B4FF, 0x9461C5FF, 0xA469D5FF, 0xAC71E6FF, 0xBD79F6FF, 0xC581FFFF,
    0x100808FF, 0x201018FF, 0x311829FF, 0x412031FF, 0x522841FF, 0x623052FF, 0x73385AFF, 0x83406AFF,
    0x94487BFF, 0xA45083FF, 0xB45994FF, 0xC561A4FF, 0xD569ACFF, 0xE671BDFF, 0xF679CDFF, 0xFF81D5FF,
    0x100000FF, 0x200000FF, 0x310000FF, 0x410000FF, 0x520000FF, 0x620000FF, 0x730000FF, 0x830000FF,
    0x940000FF, 0xA40000FF, 0xB40000FF, 0xC50000FF, 0xD50000FF, 0xE60000FF, 0xF60000FF, 0xFF0000FF,
    0x100C00FF, 0x201800FF, 0x312400FF, 0x413000FF, 0x523C00FF, 0x624800FF, 0x735500FF, 0x836100FF,
    0x946D00FF, 0xA47900FF, 0xB48500FF, 0xC59100FF, 0xD59D00FF, 0xE6AA00FF, 0xF6B600FF, 0xFFBE00FF,
    0x081000FF, 0x102000FF, 0x183000FF, 0x204000FF, 0x295000FF, 0x316100FF, 0x397100FF, 0x418100FF,
    0x4A9100FF, 0x52A100FF, 0x5AB200FF, 0x62C200FF, 0x6AD200FF, 0x73E200FF, 0x7BF200FF, 0x83FF00FF,
    0x001000FF, 0x002008FF, 0x003008FF, 0x004010FF, 0x005010FF, 0x006118FF, 0x007118FF, 0x008120FF,
    0x009120FF, 0x00A129FF, 0x00B229FF, 0x00C231FF, 0x00D231FF, 0x00E239FF, 0x00F239FF, 0x00FF41FF,
    0x001010FF, 0x002020FF, 0x003031FF, 0x004041FF, 0x005052FF, 0x006162FF, 0x007173FF, 0x008183FF,
    0x009194FF, 0x00A1A4FF, 0x00B2B4FF, 0x00C2C5FF, 0x00D2D5FF, 0x00E2E6FF, 0x00F2F6FF, 0x00FFFFFF,
    0x000410FF, 0x000820FF, 0x000C31FF, 0x001041FF, 0x001452FF, 0x001862FF, 0x001C73FF, 0x002083FF,
    0x002494FF, 0x0028A4FF, 0x002CB4FF, 0x0030C5FF, 0x0034D5FF, 0x0038E6FF, 0x003CF6FF, 0x0040FFFF,
    0x080010FF, 0x100020FF, 0x180031FF, 0x200041FF, 0x290052FF, 0x310062FF, 0x390073FF, 0x4A0083FF,
    0x520094FF, 0x5A00A4FF, 0x6200B4FF, 0x6A00C5FF, 0x7300D5FF, 0x7B00E6FF, 0x8300F6FF, 0x9400FFFF,
    0x100008FF, 0x200010FF, 0x310020FF, 0x410029FF, 0x520031FF, 0x620041FF, 0x73004AFF, 0x83005AFF,
    0x940062FF, 0xA4006AFF, 0xB4007BFF, 0xC50083FF, 0xD5008BFF, 0xE6009CFF, 0xF600A4FF, 0xFF00ACFF
];

// 256 colors RGBA a format palette split by RGBA components
export const palette8RGBA = palette32RGBA.reduce((acc, color) => {
    const r = (color >> 24) & 0xFF;
    const g = (color >> 16) & 0xFF;
    const b = (color >>  8) & 0xFF;
    const a = (color >>  0) & 0xFF;
    acc.push(r, g, b, a);

    return acc;
}, []);

// 256 colors RGBA a format palette with float colors
export const palette8Color = palette32RGBA.reduce((acc, color) => {
    const r = ((color >> 24) & 0xFF) / 255.0;
    const g = ((color >> 16) & 0xFF) / 255.0;
    const b = ((color >>  8) & 0xFF) / 255.0;
    const a = ((color >>  0) & 0xFF) / 255.0;
    acc.push([r, g, b, a]);

    return acc;
}, []);

export const map256TextToColor = (pixels, offset, count = pixels.length) => {
    const limit = Math.min(count + offset, pixels.length);
    const colors = [];

    for(let p = offset; p < limit; p++) {
        const colorIndex = pixels[p];
        colors.push(palette8Color[colorIndex]);
    }

    return colors;
};